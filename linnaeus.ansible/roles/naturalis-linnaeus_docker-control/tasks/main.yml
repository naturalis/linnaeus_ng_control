---
- name: Linnaeus NG | print disk space
  debug:
    msg: "{{ ansible_mounts[0].device }} : {{ (ansible_mounts[0].size_available /  ( 1024 ** 3 ) ) | round(2) }}GB "

- name: Linnaeus NG | print OS release
  debug:
    msg: "{{ ansible_distribution }} {{ ansible_distribution_version | string }} "

- name: Linnaeus NG | install packages
  with_items:
    - python-pip
    - libmysqlclient-dev
    - python-dev
    - mysql-client
  apt:
    name: "{{ item }}"
    update_cache: no
  tags:
    - preliminaries

- name: Linnaeus NG | install MySQL pip package
  pip:
    name: MySQL
  tags:
    - preliminaries

- name: Linnaeus NG | checking if linnaeus directory exists
  stat:
    path: /data/linnaeus
  register: linnaeus_directory
  tags:
    - preliminaries

- name: Linnaeus NG | copy existing initdb directory
  shell: 'mkdir /data/linnaeus'
  when: linnaeus_directory.stat.exists == false
  tags:
    - preliminaries

- name: Linnaeus NG | checking if initdb exists
  stat:
    path: /data/linnaeus/initdb
  register: initdb_directory
  tags:
    - preliminaries

- name: Linnaeus NG | copy existing initdb directory
  shell: 'cp -r /opt/docker-linnaeusng/linnaeus/initdb /data/linnaeus/initdb'
  when: initdb_directory.stat.exists == false
  tags:
    - preliminaries

- name: Linnaeus NG | checking if mysqlconf exists
  stat:
    path: /data/linnaeus/mysqlconf
  register: mysqlconf_directory
  tags:
    - preliminaries

- name: Linnaeus NG | copy existing mysqlconf directory
  shell: 'cp -r /opt/docker-linnaeusng/linnaeus/mysqlconf /data/linnaeus/mysqlconf'
  when: mysqlconf_directory.stat.exists == false
  tags:
    - preliminaries

- name: Linnaeus NG | install docker linnaeus
  shell: 'cd /opt/docker-linnaeusng;docker-compose down;docker pull naturalis/linnaeus;docker-compose up -d --force-recreate'
  tags:
    - preliminaries

- name: Linnaeus NG | wait for completed installation
  wait_for:
      path: /data/linnaeus/www/.git
      delay: 30
      state: present
      msg: Installation is not completed

- name: Linnaeus NG | create tools/output & backup directories
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - /data/linnaeus/www/tools/output
    - /data/linnaeus/backup/lng
  tags:
    - database

- name: Linnaeus NG | GIT update code
  shell: 'cd /opt/docker-linnaeusng && docker-compose exec -T linnaeus /var/www/html/tools/scripts/git.sh'
  register: git_result
  tags:
    - code

- name: Linnaeus NG | composer update
  shell: 'cd /opt/docker-linnaeusng && docker-compose exec -T linnaeus /var/www/html/tools/scripts/composer.sh'
  register: composer_result
  tags:
    - code

- name: Linnaeus NG | gulp 
  shell: 'cd /opt/docker-linnaeusng && docker-compose exec -T linnaeus /var/www/html/tools/scripts/gulp.sh'
  register: gulp_result
  tags:
    - code

- name: Linnaeus NG | run check_db_cli
  shell: 'cd /opt/docker-linnaeusng && docker-compose exec -T linnaeus php tools/check_db_cli.php'
  changed_when: false
  tags:
    - checkdb

      #shell: 'cat /opt/docker-linnaeusng/.env;echo {host:"$MYSQL_HOST", rootpass:"$MYSQL_ROOT_PASSWORD", user:"$MYSQL_USER", password:"$MYSQL_PASSWORD"}'


- name: Linnaeus NG | source environment
  shell: 'cat /opt/docker-linnaeusng/.env'
  register: result
  tags:
    - testenv

- name: Linnaeus NG | store environment
  set_fact: 
    output : "{{ result.stdout_lines | list }}"
  tags:
    - testenv

- name: Debug
  debug:
    msg: 'PASS: {{output.password}} USER: {{output.user}}'
  tags:
    - testenv

- name: Linnaeus NG | show environment
  shell: '. /opt/docker-linnaeusng/.env;echo {"host":"$MYSQL_HOST", "rootpass":"$MYSQL_ROOT_PASSWORD", "user":"$MYSQL_USER", "password":"$MYSQL_PASSWORD"}'
  register: dockerconfig
  tags:
    - environment

- name: Linnaeus NG | display environment
  debug:
    msg: "Mysql User: {{ dockerconfig.user }}" 
  tags:
    - environment

# todo: retrieve the root password from the installation
- name: Linnaeus NG | backup existing LNG-database
  mysql_db:
    login_host: 127.0.0.1
    login_port: 3306
    login_user: root
    login_password: us-ae-linn
    state: dump
    name: linnaeus_ng
    target: /data/linnaeus/backup/lng/{{ ansible_date_time.iso8601_basic_short }}-auto-backup.sql.gz
  tags:
    - database

- name: Linnaeus NG | checking if latest-modify.sql exists
  stat:
    path: /data/linnaeus/www/tools/output/latest-modify.sql
  register: latest_modify_sql
  tags:
    - database

- name: Linnaeus NG | backup existing LNG-database
  mysql_db:
    state: dump
    name: linnaeusng
    target: /var/backup/lng/{{ ansible_date_time.iso8601_basic_short }}-auto-backup.sql.gz
  when: latest_modify_sql.stat.exists == true
  tags:
    - database

- name: Linnaeus NG | import latest-modify.sql
  mysql_db:
    state: import
    name: linnaeusng
    target: /data/linnaeus/www/tools/output/latest-modify.sql
  when: latest_modify_sql.stat.exists == True
  tags:
    - database

- name: Linnaeus NG | check latest errors-file
  shell: cat /data/linnaeus/www/tools/output/latest-errors.txt
  register: latest_errors
  changed_when: false
  failed_when: false
  tags:
    - database

- name: Linnaeus NG | display lastest errors
  debug:
    var: latest_errors
  when: latest_errors.rc == 0
  tags:
    - database

- name: Ensure Docker Image is running
  docker_container:
      image: naturalis/linnaeus:0.0.1
      name: linnaeus
      state: started
  tags:
    - docker


