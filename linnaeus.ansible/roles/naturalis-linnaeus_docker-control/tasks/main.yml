---
# Show the disk remaining space
- name: Linnaeus NG | print disk space
  debug:
    msg: "{{ ansible_mounts[0].device }} : {{ (ansible_mounts[0].size_available /  ( 1024 ** 3 ) ) | round(2) }}GB "

# Display the OS version
- name: Linnaeus NG | print OS release
  debug:
    msg: "{{ ansible_distribution }} {{ ansible_distribution_version | string }} "

# Install essential python en mysql packages
- name: Linnaeus NG | install packages
  with_items:
    - python3
    - python3-pip
    - libmysqlclient-dev
    - python3-dev
    - mysql-client
    - python3-mysqldb
  apt:
    name: "{{ item }}"
    update_cache: no
  tags:
    - preliminaries

- name: Linnaeus NG | pip upgrade
  shell: 'pip install --upgrade pip'
  tags:
    - preliminaries

# Install MySQL pip package
#- name: Linnaeus NG | install MySQL pip package
#  pip:
#    name: MySQL
#  tags:
#    - preliminaries

# Install Docker py
- name: Linnaeus NG | install docker-py pip package
  pip:
    name: docker-py
  tags:
    - preliminaries

# Linnaeus install directory should exist
- name: Linnaeus NG | checking if linnaeus directory exists
  stat:
    path: /data/linnaeus
  register: linnaeus_directory
  tags:
    - preliminaries

# Create a linnaeus install directory
- name: Linnaeus NG | create linnaeus directory 
  shell: 'mkdir /data/linnaeus'
  when: linnaeus_directory.stat.exists == false
  tags:
    - preliminaries

# Linnaeus initdb should exist
- name: Linnaeus NG | checking if initdb exists
  stat:
    path: /data/linnaeus/initdb
  register: initdb_directory
  tags:
    - preliminaries

# Copy the content of a default linnaeus install into initdb
- name: Linnaeus NG | copy existing initdb directory
  shell: 'cp -r /opt/docker-linnaeusng/linnaeus/initdb /data/linnaeus/initdb'
  when: initdb_directory.stat.exists == false
  tags:
    - preliminaries

# Check if the mysqlconf directory exists
- name: Linnaeus NG | checking if mysqlconf exists
  stat:
    path: /data/linnaeus/mysqlconf
  register: mysqlconf_directory
  tags:
    - preliminaries

# If the mysqlconf directory does not exist copy the default mysqlconf directory 
- name: Linnaeus NG | copy existing mysqlconf directory
  shell: 'cp -r /opt/docker-linnaeusng/linnaeus/mysqlconf /data/linnaeus/mysqlconf'
  when: mysqlconf_directory.stat.exists == false
  tags:
    - preliminaries

# Check if the linnaeus git repository exists
- name: Linnaeus NG | checking if git repository exists
  stat:
    path: /data/linnaeus/www/.git
  register: linnaeus_git_directory
  tags:
    - preliminaries

# Install the dockerized linnaeus install by pulling 'naturalis/linnaeus' and (re)creating 
# the docker compose setup
- name: Linnaeus NG | install docker linnaeus
  shell: 'cd /opt/docker-linnaeusng;docker-compose down;git pull;docker pull naturalis/linnaeus;docker-compose up -d --force-recreate'
  tags:
    - preliminaries

# Docker will pull the complete git commit (master/development or another branch)
# this will take some time, so a 60 second delay is needed to complete the install, maybe more.
- name: Linnaeus NG | wait for completed installation
  wait_for:
      path: /data/linnaeus/www/.git
      delay: 60
      state: present
      msg: Installation is not completed
  when: linnaeus_git_directory.stat.exists == false
  tags:
    - preliminaries

# Create tools and backup directories if the do not exist
- name: Linnaeus NG | create tools/output & backup directories
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - /data/linnaeus/www/tools/output
    - /data/linnaeus/backup/lng
  tags:
    - database

# Pull the most recent version of the git branch specified in .env
- name: Linnaeus NG | GIT update code
  shell: 'cd /opt/docker-linnaeusng && docker-compose exec -T linnaeus /var/www/html/tools/scripts/git.sh'
  register: git_result
  tags:
    - code

# Run composer install for the needed third party php libraries
- name: Linnaeus NG | composer update
  shell: 'cd /opt/docker-linnaeusng && docker-compose exec -T linnaeus /var/www/html/tools/scripts/composer.sh'
  register: composer_result
  tags:
    - code

# Run npm, bower and gulp for installing all third party javascript and css, and creating a bundle.
- name: Linnaeus NG | gulp 
  shell: 'cd /opt/docker-linnaeusng && docker-compose exec -T linnaeus /var/www/html/tools/scripts/gulp.sh'
  register: gulp_result
  tags:
    - code

# Compare the database model and create a migration if there are differences
- name: Linnaeus NG | run check_db_cli
  shell: 'cd /opt/docker-linnaeusng && docker-compose exec -T linnaeus php tools/check_db_cli.php'
  changed_when: false
  tags:
    - database

# Retrieve the 'external' database port on the host machine from the environment
- name: Linnaeus NG | database port
  shell: 'cd /opt/docker-linnaeusng && docker-compose exec -T linnaeus printenv MYSQL_EXTERNAL_PORT'
  register: mysql_external_port
  tags:
    - database

# Retrieve the root password of the database on the host machine from the environment
- name: Linnaeus NG | database root password
  shell: 'cd /opt/docker-linnaeusng && docker-compose exec -T linnaeus printenv MYSQL_ROOT_PASSWORD'
  register: mysql_root_password
  tags:
    - database

# Check if the migration mysql file exists
- name: Linnaeus NG | checking if latest-modify.sql exists
  stat:
    path: /data/linnaeus/www/tools/output/latest-modify.sql
  register: latest_modify_sql
  tags:
    - database

# Backup the complete database, if there is a migration
- name: Linnaeus NG | backup existing LNG-database
  mysql_db:
    login_host: 127.0.0.1
    login_port: "{{ mysql_external_port.stdout }}"
    login_user: root
    login_password: "{{ mysql_root_password.stdout }}"
    state: dump
    name: linnaeusng
    target: /var/backup/lng/{{ ansible_date_time.iso8601_basic_short }}-auto-backup.sql.gz
  when: latest_modify_sql.stat.exists == true
  tags:
    - database


# Importing the update.sql containing essential trait types and translations
- name: Linnaeus NG | import update.sql
  mysql_db:
    login_host: 127.0.0.1
    login_port: "{{ mysql_external_port.stdout }}"
    login_user: root
    login_password: "{{ mysql_root_password.stdout }}"
    state: import
    name: linnaeusng
    target: /data/linnaeus/www/database/update.sql
  tags:
    - database

# Set the common settings if they are missing
- name: Linnaeus NG | run check_settings
  shell: 'cd /opt/docker-linnaeusng && docker-compose exec -T linnaeus php tools/check_settings.php'
  tags:
    - database

# Import the database migration
- name: Linnaeus NG | import latest-modify.sql
  mysql_db:
    login_host: 127.0.0.1
    login_port: "{{ mysql_external_port.stdout }}"
    login_user: root
    login_password: "{{ mysql_root_password.stdout }}"
    state: import
    name: linnaeusng
    target: /data/linnaeus/www/tools/output/latest-modify.sql
  when: latest_modify_sql.stat.exists == true
  tags:
    - database

# Check for errors
- name: Linnaeus NG | check latest errors-file
  shell: cat /data/linnaeus/www/tools/output/latest-errors.txt
  register: latest_errors
  changed_when: false
  failed_when: false
  tags:
    - database

# Display latest errors
- name: Linnaeus NG | display lastest errors
  debug:
    var: latest_errors
  when: latest_errors.rc == 0
  tags:
    - database

# Ensure if the docker image is running
- name: Ensure Docker Image is running
  docker_container:
      image: naturalis/linnaeus:0.0.1
      name: linnaeus
      state: started
  tags:
    - docker

